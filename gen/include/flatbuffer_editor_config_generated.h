// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_FLATBUFFEREDITORCONFIG_SCENE_LAB_H_
#define FLATBUFFERS_GENERATED_FLATBUFFEREDITORCONFIG_SCENE_LAB_H_

#include "flatbuffers/flatbuffers.h"

#include "common_generated.h"

namespace scene_lab {

struct FlatbufferEditorConfig;

struct FlatbufferEditorConfig FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_READ_ONLY = 4,
    VT_AUTO_COMMIT_EDITS = 6,
    VT_ALLOW_RESIZING_FLATBUFFER = 8,
    VT_ALLOW_ADDING_FIELDS = 10,
    VT_UI_SIZE = 12,
    VT_UI_SPACING = 14,
    VT_BLANK_FIELD_WIDTH = 16,
    VT_BG_BUTTON_COLOR = 18,
    VT_BG_BUTTON_HOVER_COLOR = 20,
    VT_BG_BUTTON_CLICK_COLOR = 22,
    VT_TEXT_NORMAL_COLOR = 24,
    VT_TEXT_COMMENT_COLOR = 26,
    VT_TEXT_BUTTON_COLOR = 28,
    VT_TEXT_DISABLED_COLOR = 30,
    VT_TEXT_EDITABLE_COLOR = 32,
    VT_TEXT_EDITING_COLOR = 34,
    VT_TEXT_MODIFIED_COLOR = 36,
    VT_TEXT_COMMITTED_COLOR = 38,
    VT_TEXT_ERROR_COLOR = 40
  };
  bool read_only() const { return GetField<uint8_t>(VT_READ_ONLY, 0) != 0; }
  bool mutate_read_only(bool _read_only) { return SetField(VT_READ_ONLY, static_cast<uint8_t>(_read_only)); }
  bool auto_commit_edits() const { return GetField<uint8_t>(VT_AUTO_COMMIT_EDITS, 1) != 0; }
  bool mutate_auto_commit_edits(bool _auto_commit_edits) { return SetField(VT_AUTO_COMMIT_EDITS, static_cast<uint8_t>(_auto_commit_edits)); }
  bool allow_resizing_flatbuffer() const { return GetField<uint8_t>(VT_ALLOW_RESIZING_FLATBUFFER, 1) != 0; }
  bool mutate_allow_resizing_flatbuffer(bool _allow_resizing_flatbuffer) { return SetField(VT_ALLOW_RESIZING_FLATBUFFER, static_cast<uint8_t>(_allow_resizing_flatbuffer)); }
  bool allow_adding_fields() const { return GetField<uint8_t>(VT_ALLOW_ADDING_FIELDS, 0) != 0; }
  bool mutate_allow_adding_fields(bool _allow_adding_fields) { return SetField(VT_ALLOW_ADDING_FIELDS, static_cast<uint8_t>(_allow_adding_fields)); }
  int8_t ui_size() const { return GetField<int8_t>(VT_UI_SIZE, 16); }
  bool mutate_ui_size(int8_t _ui_size) { return SetField(VT_UI_SIZE, _ui_size); }
  int8_t ui_spacing() const { return GetField<int8_t>(VT_UI_SPACING, 3); }
  bool mutate_ui_spacing(int8_t _ui_spacing) { return SetField(VT_UI_SPACING, _ui_spacing); }
  int8_t blank_field_width() const { return GetField<int8_t>(VT_BLANK_FIELD_WIDTH, 8); }
  bool mutate_blank_field_width(int8_t _blank_field_width) { return SetField(VT_BLANK_FIELD_WIDTH, _blank_field_width); }
  const fplbase::ColorRGBA *bg_button_color() const { return GetStruct<const fplbase::ColorRGBA *>(VT_BG_BUTTON_COLOR); }
  fplbase::ColorRGBA *mutable_bg_button_color() { return GetStruct<fplbase::ColorRGBA *>(VT_BG_BUTTON_COLOR); }
  const fplbase::ColorRGBA *bg_button_hover_color() const { return GetStruct<const fplbase::ColorRGBA *>(VT_BG_BUTTON_HOVER_COLOR); }
  fplbase::ColorRGBA *mutable_bg_button_hover_color() { return GetStruct<fplbase::ColorRGBA *>(VT_BG_BUTTON_HOVER_COLOR); }
  const fplbase::ColorRGBA *bg_button_click_color() const { return GetStruct<const fplbase::ColorRGBA *>(VT_BG_BUTTON_CLICK_COLOR); }
  fplbase::ColorRGBA *mutable_bg_button_click_color() { return GetStruct<fplbase::ColorRGBA *>(VT_BG_BUTTON_CLICK_COLOR); }
  const fplbase::ColorRGBA *text_normal_color() const { return GetStruct<const fplbase::ColorRGBA *>(VT_TEXT_NORMAL_COLOR); }
  fplbase::ColorRGBA *mutable_text_normal_color() { return GetStruct<fplbase::ColorRGBA *>(VT_TEXT_NORMAL_COLOR); }
  const fplbase::ColorRGBA *text_comment_color() const { return GetStruct<const fplbase::ColorRGBA *>(VT_TEXT_COMMENT_COLOR); }
  fplbase::ColorRGBA *mutable_text_comment_color() { return GetStruct<fplbase::ColorRGBA *>(VT_TEXT_COMMENT_COLOR); }
  const fplbase::ColorRGBA *text_button_color() const { return GetStruct<const fplbase::ColorRGBA *>(VT_TEXT_BUTTON_COLOR); }
  fplbase::ColorRGBA *mutable_text_button_color() { return GetStruct<fplbase::ColorRGBA *>(VT_TEXT_BUTTON_COLOR); }
  const fplbase::ColorRGBA *text_disabled_color() const { return GetStruct<const fplbase::ColorRGBA *>(VT_TEXT_DISABLED_COLOR); }
  fplbase::ColorRGBA *mutable_text_disabled_color() { return GetStruct<fplbase::ColorRGBA *>(VT_TEXT_DISABLED_COLOR); }
  const fplbase::ColorRGBA *text_editable_color() const { return GetStruct<const fplbase::ColorRGBA *>(VT_TEXT_EDITABLE_COLOR); }
  fplbase::ColorRGBA *mutable_text_editable_color() { return GetStruct<fplbase::ColorRGBA *>(VT_TEXT_EDITABLE_COLOR); }
  const fplbase::ColorRGBA *text_editing_color() const { return GetStruct<const fplbase::ColorRGBA *>(VT_TEXT_EDITING_COLOR); }
  fplbase::ColorRGBA *mutable_text_editing_color() { return GetStruct<fplbase::ColorRGBA *>(VT_TEXT_EDITING_COLOR); }
  const fplbase::ColorRGBA *text_modified_color() const { return GetStruct<const fplbase::ColorRGBA *>(VT_TEXT_MODIFIED_COLOR); }
  fplbase::ColorRGBA *mutable_text_modified_color() { return GetStruct<fplbase::ColorRGBA *>(VT_TEXT_MODIFIED_COLOR); }
  const fplbase::ColorRGBA *text_committed_color() const { return GetStruct<const fplbase::ColorRGBA *>(VT_TEXT_COMMITTED_COLOR); }
  fplbase::ColorRGBA *mutable_text_committed_color() { return GetStruct<fplbase::ColorRGBA *>(VT_TEXT_COMMITTED_COLOR); }
  const fplbase::ColorRGBA *text_error_color() const { return GetStruct<const fplbase::ColorRGBA *>(VT_TEXT_ERROR_COLOR); }
  fplbase::ColorRGBA *mutable_text_error_color() { return GetStruct<fplbase::ColorRGBA *>(VT_TEXT_ERROR_COLOR); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_READ_ONLY) &&
           VerifyField<uint8_t>(verifier, VT_AUTO_COMMIT_EDITS) &&
           VerifyField<uint8_t>(verifier, VT_ALLOW_RESIZING_FLATBUFFER) &&
           VerifyField<uint8_t>(verifier, VT_ALLOW_ADDING_FIELDS) &&
           VerifyField<int8_t>(verifier, VT_UI_SIZE) &&
           VerifyField<int8_t>(verifier, VT_UI_SPACING) &&
           VerifyField<int8_t>(verifier, VT_BLANK_FIELD_WIDTH) &&
           VerifyField<fplbase::ColorRGBA>(verifier, VT_BG_BUTTON_COLOR) &&
           VerifyField<fplbase::ColorRGBA>(verifier, VT_BG_BUTTON_HOVER_COLOR) &&
           VerifyField<fplbase::ColorRGBA>(verifier, VT_BG_BUTTON_CLICK_COLOR) &&
           VerifyField<fplbase::ColorRGBA>(verifier, VT_TEXT_NORMAL_COLOR) &&
           VerifyField<fplbase::ColorRGBA>(verifier, VT_TEXT_COMMENT_COLOR) &&
           VerifyField<fplbase::ColorRGBA>(verifier, VT_TEXT_BUTTON_COLOR) &&
           VerifyField<fplbase::ColorRGBA>(verifier, VT_TEXT_DISABLED_COLOR) &&
           VerifyField<fplbase::ColorRGBA>(verifier, VT_TEXT_EDITABLE_COLOR) &&
           VerifyField<fplbase::ColorRGBA>(verifier, VT_TEXT_EDITING_COLOR) &&
           VerifyField<fplbase::ColorRGBA>(verifier, VT_TEXT_MODIFIED_COLOR) &&
           VerifyField<fplbase::ColorRGBA>(verifier, VT_TEXT_COMMITTED_COLOR) &&
           VerifyField<fplbase::ColorRGBA>(verifier, VT_TEXT_ERROR_COLOR) &&
           verifier.EndTable();
  }
};

struct FlatbufferEditorConfigBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_read_only(bool read_only) { fbb_.AddElement<uint8_t>(FlatbufferEditorConfig::VT_READ_ONLY, static_cast<uint8_t>(read_only), 0); }
  void add_auto_commit_edits(bool auto_commit_edits) { fbb_.AddElement<uint8_t>(FlatbufferEditorConfig::VT_AUTO_COMMIT_EDITS, static_cast<uint8_t>(auto_commit_edits), 1); }
  void add_allow_resizing_flatbuffer(bool allow_resizing_flatbuffer) { fbb_.AddElement<uint8_t>(FlatbufferEditorConfig::VT_ALLOW_RESIZING_FLATBUFFER, static_cast<uint8_t>(allow_resizing_flatbuffer), 1); }
  void add_allow_adding_fields(bool allow_adding_fields) { fbb_.AddElement<uint8_t>(FlatbufferEditorConfig::VT_ALLOW_ADDING_FIELDS, static_cast<uint8_t>(allow_adding_fields), 0); }
  void add_ui_size(int8_t ui_size) { fbb_.AddElement<int8_t>(FlatbufferEditorConfig::VT_UI_SIZE, ui_size, 16); }
  void add_ui_spacing(int8_t ui_spacing) { fbb_.AddElement<int8_t>(FlatbufferEditorConfig::VT_UI_SPACING, ui_spacing, 3); }
  void add_blank_field_width(int8_t blank_field_width) { fbb_.AddElement<int8_t>(FlatbufferEditorConfig::VT_BLANK_FIELD_WIDTH, blank_field_width, 8); }
  void add_bg_button_color(const fplbase::ColorRGBA *bg_button_color) { fbb_.AddStruct(FlatbufferEditorConfig::VT_BG_BUTTON_COLOR, bg_button_color); }
  void add_bg_button_hover_color(const fplbase::ColorRGBA *bg_button_hover_color) { fbb_.AddStruct(FlatbufferEditorConfig::VT_BG_BUTTON_HOVER_COLOR, bg_button_hover_color); }
  void add_bg_button_click_color(const fplbase::ColorRGBA *bg_button_click_color) { fbb_.AddStruct(FlatbufferEditorConfig::VT_BG_BUTTON_CLICK_COLOR, bg_button_click_color); }
  void add_text_normal_color(const fplbase::ColorRGBA *text_normal_color) { fbb_.AddStruct(FlatbufferEditorConfig::VT_TEXT_NORMAL_COLOR, text_normal_color); }
  void add_text_comment_color(const fplbase::ColorRGBA *text_comment_color) { fbb_.AddStruct(FlatbufferEditorConfig::VT_TEXT_COMMENT_COLOR, text_comment_color); }
  void add_text_button_color(const fplbase::ColorRGBA *text_button_color) { fbb_.AddStruct(FlatbufferEditorConfig::VT_TEXT_BUTTON_COLOR, text_button_color); }
  void add_text_disabled_color(const fplbase::ColorRGBA *text_disabled_color) { fbb_.AddStruct(FlatbufferEditorConfig::VT_TEXT_DISABLED_COLOR, text_disabled_color); }
  void add_text_editable_color(const fplbase::ColorRGBA *text_editable_color) { fbb_.AddStruct(FlatbufferEditorConfig::VT_TEXT_EDITABLE_COLOR, text_editable_color); }
  void add_text_editing_color(const fplbase::ColorRGBA *text_editing_color) { fbb_.AddStruct(FlatbufferEditorConfig::VT_TEXT_EDITING_COLOR, text_editing_color); }
  void add_text_modified_color(const fplbase::ColorRGBA *text_modified_color) { fbb_.AddStruct(FlatbufferEditorConfig::VT_TEXT_MODIFIED_COLOR, text_modified_color); }
  void add_text_committed_color(const fplbase::ColorRGBA *text_committed_color) { fbb_.AddStruct(FlatbufferEditorConfig::VT_TEXT_COMMITTED_COLOR, text_committed_color); }
  void add_text_error_color(const fplbase::ColorRGBA *text_error_color) { fbb_.AddStruct(FlatbufferEditorConfig::VT_TEXT_ERROR_COLOR, text_error_color); }
  FlatbufferEditorConfigBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  FlatbufferEditorConfigBuilder &operator=(const FlatbufferEditorConfigBuilder &);
  flatbuffers::Offset<FlatbufferEditorConfig> Finish() {
    auto o = flatbuffers::Offset<FlatbufferEditorConfig>(fbb_.EndTable(start_, 19));
    return o;
  }
};

inline flatbuffers::Offset<FlatbufferEditorConfig> CreateFlatbufferEditorConfig(flatbuffers::FlatBufferBuilder &_fbb,
    bool read_only = false,
    bool auto_commit_edits = true,
    bool allow_resizing_flatbuffer = true,
    bool allow_adding_fields = false,
    int8_t ui_size = 16,
    int8_t ui_spacing = 3,
    int8_t blank_field_width = 8,
    const fplbase::ColorRGBA *bg_button_color = 0,
    const fplbase::ColorRGBA *bg_button_hover_color = 0,
    const fplbase::ColorRGBA *bg_button_click_color = 0,
    const fplbase::ColorRGBA *text_normal_color = 0,
    const fplbase::ColorRGBA *text_comment_color = 0,
    const fplbase::ColorRGBA *text_button_color = 0,
    const fplbase::ColorRGBA *text_disabled_color = 0,
    const fplbase::ColorRGBA *text_editable_color = 0,
    const fplbase::ColorRGBA *text_editing_color = 0,
    const fplbase::ColorRGBA *text_modified_color = 0,
    const fplbase::ColorRGBA *text_committed_color = 0,
    const fplbase::ColorRGBA *text_error_color = 0) {
  FlatbufferEditorConfigBuilder builder_(_fbb);
  builder_.add_text_error_color(text_error_color);
  builder_.add_text_committed_color(text_committed_color);
  builder_.add_text_modified_color(text_modified_color);
  builder_.add_text_editing_color(text_editing_color);
  builder_.add_text_editable_color(text_editable_color);
  builder_.add_text_disabled_color(text_disabled_color);
  builder_.add_text_button_color(text_button_color);
  builder_.add_text_comment_color(text_comment_color);
  builder_.add_text_normal_color(text_normal_color);
  builder_.add_bg_button_click_color(bg_button_click_color);
  builder_.add_bg_button_hover_color(bg_button_hover_color);
  builder_.add_bg_button_color(bg_button_color);
  builder_.add_blank_field_width(blank_field_width);
  builder_.add_ui_spacing(ui_spacing);
  builder_.add_ui_size(ui_size);
  builder_.add_allow_adding_fields(allow_adding_fields);
  builder_.add_allow_resizing_flatbuffer(allow_resizing_flatbuffer);
  builder_.add_auto_commit_edits(auto_commit_edits);
  builder_.add_read_only(read_only);
  return builder_.Finish();
}

inline const scene_lab::FlatbufferEditorConfig *GetFlatbufferEditorConfig(const void *buf) {
  return flatbuffers::GetRoot<scene_lab::FlatbufferEditorConfig>(buf);
}

inline FlatbufferEditorConfig *GetMutableFlatbufferEditorConfig(void *buf) {
  return flatbuffers::GetMutableRoot<FlatbufferEditorConfig>(buf);
}

inline bool VerifyFlatbufferEditorConfigBuffer(flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<scene_lab::FlatbufferEditorConfig>(nullptr);
}

inline void FinishFlatbufferEditorConfigBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<scene_lab::FlatbufferEditorConfig> root) {
  fbb.Finish(root);
}

}  // namespace scene_lab

#endif  // FLATBUFFERS_GENERATED_FLATBUFFEREDITORCONFIG_SCENE_LAB_H_
